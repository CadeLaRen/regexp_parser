= Regexp::Parser

  Note "This project is in its early stages of development."
  Warn "Names and structures are still moving and changing."


== What?
A library for parsing and transforming regular expressions.

* Supports ruby 1.8 and 1.9 runtime
* Supports ruby 1.8 and 1.9 regular expression syntax
* Multilayered for reusability
  * A scanner based on ragel[http://www.complang.org/ragel/]
  * A lexer that produces a "stream" of tokens
  * A parser that produces a "tree" of Regexp::Expression objects (OO API)


Thinking about
* Support for other flavors (See References below)
* A parser that produces s-expressions
* A transformation "driver"


== Examples
=== Lexer
  Regexp::Lexer.lex /a?(b)*[c]+)/  do |token|
    puts token.inspect
  end

=== Parser
  root = Regexp::Parser.parse /a(b)[c])/m

  root.multi_line?  # => true (aliased as m?)
  root.insensitive? # => false (aliased as i?)

  root.expressions.each do |expression|
    puts expression.inspect
  end


== Supported Syntax Elements
The following is targeted for support by the scanner

Notes with ** mean:

  MISSING : nothing in place, or barely there
  NEED REVIEW/TESTS: mostly there, but not varified
  SCANNER COMPLETE: scanner support implemented, works, has tests
  PARSER COMPLETE: parser support implemented, works, has tests (implies SCANNER COMPLETE)

- Alternation: a|b|c ** MISSING
- Anchors: ^, $, \b, etc... ** SCANNER COMPLETE
- Character Classes (aka Sets): [abc], [^\]] ** MISSING PROPERTIES
- Character Types: \d, \H, \s, etc... ** SCANNER COMPLETE

- Escaped Sequences
  - Backreference: \1 thru \9 ** MISSING
  - Control: \C-C, \cD ** NEEDS REVIEW/TESTS
  - Hex: \x20, \x{701230} ** NEEDS REVIEW/TESTS
  - Meta: \M-C, etc.. ** NEEDS REVIEW/TESTS
  - Meta-Control: \M-\C-C ** NEEDS REVIEW/TESTS
  - Metacharacters: \\, \+, \?, etc.. ** NEEDS REVIEW/TESTS
  - Octal: \012 ** MISSING

- Grouped Expressions
  - Atomic: (?>abc) ** SCANNER COMPLETE
  - Capturing: (abc) ** SCANNER COMPLETE
  - Comment: (?# comment) ** SCANNER COMPLETE
  - Named: (?<name>abc) ** SCANNER COMPLETE (no single quotes, yet)
  - Options: (?mi-x:abc) ** SCANNER COMPLETE (missing some options, u, e, etc..)
  - Passive: (?:abc) ** SCANNER COMPLETE
  - Assertions
    - Lookahead: (?=abc) ** SCANNER COMPLETE
    - Negative Lookahead: (?!abc) ** SCANNER COMPLETE
    - Lookabehind: (?<=abc) ** SCANNER COMPLETE
    - Negative Lookbehind: (?<\!abc) ** SCANNER COMPLETE

- Literals: abc ** NEEDS TESTS 

- Properties: 
  - Classes: \p{{Alpha}}, \P{{Space}}, etc...  ** NEEDS REVIEW/TESTS
  - Derived Properties: \p{{Math}}, ** MISSING
  - General Categories: \p{{Lu}}, \P{{Cs}}, etc... ** NEEDS REVIEW/TESTS
  - Scripts: \p{{Arabic}}, \P{{Hiragana}} ** MISSING
  - Simple Properties (aka Aliases):  ** MISSING

- POSIX classes: ** NEEDS REVIEW/TESTS

- Quantifiers
  - Greedy: ** SCANNER COMPLETE
  - Reluctant: ** SCANNER COMPLETE  
  - Possessive: ** SCANNER COMPLETE (not in Oniguruma?)


== Notes
=== Scanner
* Currently, regex syntax is checked by instantiating a Regexp object from the
  input before scanning. If no error is raised, then the syntax is all good.
  Obviously this only works for ruby regular expressions. Syntax error checking
  will be required to support other flavors. (See syntax and value errors in
  oniguruma.h)

* Need to extract a "baseline" scanner common to all flavours, and layer subsets
  of syntax into individual machines, like posix classes and unicode properties.

=== Parser
* Think of ways to specify flavors.

=== Expression
* Implementing to_s and to_re requires saving open/close token text, including
  quantifiers.


== References
Documentation and information being read while working on this project.

==== Oniguruma Syntax (main focus)
* Oniguruma Regular Expressions link[http://www.geocities.jp/kosako3/oniguruma/doc/RE.txt]
* Read Ruby > Regexps link[http://ruby.runpaint.org/regexps]
* TextMate (uses Oniguruma) Manual: Regular Expressions link[http://manual.macromates.com/en/regular_expressions]

==== Other Flavors
* GNU: link[http://www.delorie.com/gnu/docs/regex/regex_toc.html]
* PCRE link[http://www.pcre.org/pcre.txt]
* PERL link[http://perldoc.perl.org/perlreref.html]
* POSIX link[http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap09.html]
* TRE link[http://laurikari.net/tre/documentation/regex-syntax/]

==== General
* GNU Comparisons link[http://www.greenend.org.uk/rjk/2002/06/regexp.html]
* Enumerating the strings of regular languages link[http://www.cs.dartmouth.edu/~doug/nfa.ps.gz]
* Mastering Regular Expressions, By Jeffrey E.F. Friedl (1st Edition) book[http://oreilly.com/catalog/9781565922570/]
* Regular Expression Flavor Comparison link[http://www.regular-expressions.info/refflavors.html]
* Regular Expression Matching: the Virtual Machine Approach link[http://swtch.com/~rsc/regexp/regexp2.html]

==== Unicode
* Unicode Explained, By Jukka K. Korpela. book[http://oreilly.com/catalog/9780596101213]
* Unicode Property Aliases link[http://www.unicode.org/Public/UNIDATA/PropertyAliases.txt]
* Unicode Regular Expressions link[http://www.unicode.org/reports/tr18/]


== Thanks
This work is based on the work and ideas of many people, directly or indirectly.
The following are some of them.

* Adrian Thurston, for developing ragel[http://www.complang.org/ragel/].

* Caleb Clausen, for feedback, which inspired this,  valuable insights on structuring the parser,
  and lots of cool code[http://github.com/coatl].

* Jan Goyvaerts, for his excellent resource[:http://www.regular-expressions.info] on regular expressions. I owe him a "steak dinner", at least.

* Run Paint Run Run, for his work on Read[http://ruby.runpaint.org/] Ruby


== Copyright
Copyright (c) 2010 Ammar Ali. See LICENSE file for details.
